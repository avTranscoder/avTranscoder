import glob, re
import os

Import( "env" )
Import( "envJava" )
Import( "envPy" )
Import( "installPrefix" )
Import( "resampleLibraryName" )

# Set a default version
avTranscoderVersion = "0.0.1"

try:
	import git
	# Get last tag of git repository
	repo = git.Repo( "." )
	tags = repo.tags
	if tags:
		lastTag = tags[-1]
		avTranscoderVersion = lastTag.name[1:]
	else:
		raise
except Exception:
	print "Warning: Can't access the last tag of git repository ; default version will be '0.0.1'."

env.Append(
    SHLIBVERSION = avTranscoderVersion
)

staticAvTranscoder = env.StaticLibrary(
    'sAvTranscoder',
    Glob( 'AvTranscoder/*.cpp' ) +
    Glob( 'AvTranscoder/*/*.cpp' ),
    LIBS = [
        'avutil',
        'avcodec',
        'avformat',
        'swscale',
        resampleLibraryName,
    ]
)

sharedAvTranscoder = env.SharedLibrary(
    'AvTranscoder',
    Glob( 'AvTranscoder/*.cpp' ) +
    Glob( 'AvTranscoder/*/*.cpp' ),
    LIBS = [
        'avutil',
        'avcodec',
        'avformat',
        'swscale',
        resampleLibraryName,
    ],
    SHLIBVERSION = avTranscoderVersion,
)

javaAvTranscoder = envJava.SharedLibrary(
	'jAvTranscoder',
	source=['AvTranscoder/avTranscoder.i'],
	LIBS=[ 
		staticAvTranscoder,
		'avutil',
		'avcodec',
		'avformat',
		'swscale',
		resampleLibraryName,
	],
    SHLIBVERSION = avTranscoderVersion,
)

pythonAvTranscoder = envPy.SharedLibrary(
	'pyAvTranscoder',
	source='AvTranscoder/avTranscoder.i',
	LIBS=[
		staticAvTranscoder,
		'avutil',
		'avcodec',
		'avformat',
		'swscale',
		resampleLibraryName,
	],
    SHLIBVERSION = avTranscoderVersion,
)

javaAvTranscoder_class = env.Java(
    target = 'jAvTranscoderClass',
    source = Glob( envJava['JARCHDIR'] )
)
env.Depends( javaAvTranscoder_class, javaAvTranscoder )

if not javaAvTranscoder_class:
	print "Java binding: can't generate JAR file while first build, because java classes are not already generated. Relaunch the build to generate it."
else:
	javaAvTranscoder_jar = env.Jar(
		# Add version to the JAR name
		target =  os.path.join( 'jAvTranscoderJar', 'jAvTranscoder.' + avTranscoderVersion),
		source = javaAvTranscoder_class
	)
	env.Depends( javaAvTranscoder_jar, javaAvTranscoder_class )
	env.Alias( "install", env.Install( os.path.join( installPrefix, "jar" ), javaAvTranscoder_jar ) )

Export( { 'sAvTranscoder' : staticAvTranscoder } )
Export( { 'AvTranscoder'  : sharedAvTranscoder } )
Export( { 'jAvTranscoder'  : javaAvTranscoder } )
Export( { 'pyAvTranscoder'  : pythonAvTranscoder } )
Export( { 'jAvTranscoderClass'  : javaAvTranscoder_class } )

env.Alias( "install", env.InstallVersionedLib( os.path.join( installPrefix, "lib" ), sharedAvTranscoder) )
env.Alias( "install", env.Install( os.path.join( installPrefix, "lib" ), staticAvTranscoder ) )
env.Alias( "install", env.InstallVersionedLib( os.path.join( installPrefix, "lib" ), javaAvTranscoder ) )
env.Alias( "install", env.InstallVersionedLib( os.path.join( installPrefix, "lib" ), pythonAvTranscoder ) )

env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder" ), Glob( 'AvTranscoder/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/CodedStream" ), Glob( 'AvTranscoder/CodedStream/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/CodedStructures" ), Glob( 'AvTranscoder/CodedStructures/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/EssenceStream" ), Glob( 'AvTranscoder/EssenceStream/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/EssenceStructures" ), Glob( 'AvTranscoder/EssenceStructures/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/EssenceTransform" ), Glob( 'AvTranscoder/EssenceTransform/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/File" ), Glob( 'AvTranscoder/File/*.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/Metadatas" ), Glob( 'AvTranscoder/Metadatas/MediaMetadatasStructures.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/Metadatas" ), Glob( 'AvTranscoder/Metadatas/Print.hpp' ) ) )
env.Alias( "install", env.Install(os.path.join( installPrefix, "include/AvTranscoder/Transcoder" ), Glob( 'AvTranscoder/Transcoder/*.hpp' ) ) )
